class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        self.height = 1

    def get_height(self, node):
        return node.height if node is not None else 0

    def update_height(self):
        self.height = 1 + max(self.get_height(self.left), self.get_height(self.right))

    def get_balance(self):
        return self.get_height(self.left) - self.get_height(self.right)

    def rotate_right(self):
        y = self.left
        T2 = y.right
        y.right = self
        self.left = T2
        self.update_height()
        y.update_height()
        return y

    def rotate_left(self):
        y = self.right
        T2 = y.left
        y.left = self
        self.right = T2
        self.update_height()
        y.update_height()
        return y


class Arvore:
    def __init__(self):
        self.root = None

    def search(self, value):
        node = self.root
        while node is not None:
            if value == node.value:
                print("found")
                return True
            elif value < node.value:
                node = node.left
            else:
                node = node.right
        return False

    def _insert(self, node, value):
        if node is None:
            return Node(value)
        if value < node.value:
            node.left = self._insert(node.left, value)
        elif value > node.value:
            node.right = self._insert(node.right, value)
        else:
            return node

        node.update_height()
        balance = node.get_balance()

        if balance > 1 and value < node.left.value:
            return node.rotate_right()
        if balance > 1 and value > node.left.value:
            node.left = node.left.rotate_left()
            return node.rotate_right()
        if balance < -1 and value > node.right.value:
            return node.rotate_left()
        if balance < -1 and value < node.right.value:
            node.right = node.right.rotate_right()
            return node.rotate_left()

        return node

    def insert(self, value):
        self.root = self._insert(self.root, value)


arvore = Arvore()
values = [10, 5, 15, 3, 1, 20, 25, 18]
for v in values:
    arvore.insert(v)

arvore.search(20)
